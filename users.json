{"_id":{"$oid":"5a0fc30429141a4424c81ef0"},"title":"React Testing","id":"ccbbbfc0-5856-4f1e-b8dc-c244022559ea","content":{"entityMap":{},"blocks":[{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"header-three","text":"Testing reduces liability.","key":"3vc6r"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"3i6ap"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"As developers we act as agents of a product team or leadership to deliver an a working an application. How do we validate that our application \"works\" or the story we delivers the specified feature set? The burden of proof is up in the air. Testing shifts that burden away from the development lifecycle and onto the market.","key":"44ti2"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"ftt5k"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"header-two","text":"Headline Level 2","key":"cgti2"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"aucch"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"header-three","text":"The value of Components. ","key":"7d95e"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"9jlr5"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"Components should do one thing, some stateless, come classes.","key":"9nhju"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"3uhh"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"A components existential crisis, where do i, the component, get my state and where do i get my props? do i get them from the Universe, a HoC","key":"85vpo"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"2el4u"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"blockquote","text":"If unit testing is about testing the code I wrote without the bother of everything else, where is there more value in testing? Will a user ever arrive in a context where they reach this component in isolation like this? The code that's tested comprises a UI that goes out in front of users. Wouldn't it follow that testing the user facing portion of it is just as valuable as testing a block of code?","key":"cin2d"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"avnam"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"Who's mouth are you in?","key":"d4dag"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"3ua5t"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"Hello.","key":"9h3o3"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"dt5rk"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"header-three","text":"Testing components","key":"cecj2"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"1n99f"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unordered-list-item","text":"Typechecking can get you very far","key":"euu2n"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unordered-list-item","text":"Unit tests can get you a little further","key":"n84m"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unordered-list-item","text":"Acceptance testing is 💸💸💸","key":"aifik"}]},"dateAdded":{"$date":"2017-11-18T05:12:36.265Z"},"user":{"$oid":"5a06273696abf4062fc198ba"},"public":false,"__v":0,"dateModified":{"$date":"2018-04-23T07:31:44.678Z"}}
{"_id":{"$oid":"5a18852c3b3e89d1831929aa"},"title":"Markdown Examples","id":"0cfd4d6b-0c8f-4475-83c7-f4719f4ccc3b","content":{"entityMap":{"0":{"data":{"src":"https://file-xzmszfjdvg.now.sh/","alt":"Smiley face"},"mutability":"IMMUTABLE","type":"IMG"}},"blocks":[{"data":{"language":"js"},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"code-block","text":"const something = (x) =\u003e `Hello ${x}`\n\nvar nothing = `No ${something('red')}`","key":"62rta"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"90ejd"},{"data":{},"entityRanges":[],"inlineStyleRanges":[{"style":"CODE","length":20,"offset":9}],"depth":0,"type":"unstyled","text":"Okay. So Shift + Enter/Return breaks out of the code block.","key":"hmkp"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"3ta6e"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"adsffdsafdasf","key":"c870g"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"c2vm6"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"blockquote","text":"Hello. this is a block quote.","key":"a91uu"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"3bf09"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unordered-list-item","text":"Hello","key":"7huqh"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unordered-list-item","text":"This is an unordered list","key":"eu0n4"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unordered-list-item","text":"Really","key":"8ijre"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unordered-list-item","text":"Yea this is a thing now","key":"bjnq0"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unordered-list-item","text":"Love it","key":"fc67b"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"40hg7"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"header-two","text":"Headline Level 2","key":"18j81"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"seriously level 2 is the best level","key":"91mm3"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"bpcs1"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"header-two","text":"Hello. I am another Headline","key":"43u9m"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"3155m"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"ordered-list-item","text":"hello","key":"5gpa2"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"ordered-list-item","text":"what the fuck","key":"n2jj"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"ordered-list-item","text":"is going with these lists.","key":"1esae"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"bdkid"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"header-three","text":"Headline Level 3","key":"d05rd"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"ep1s3"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"Lorem ipsum","key":"cpr2t"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"9nm26"},{"data":{},"entityRanges":[{"key":0,"length":1,"offset":0}],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"​ ","key":"5pgsf"}]},"dateAdded":{"$date":"2017-11-24T20:43:43.596Z"},"user":{"$oid":"5a06273696abf4062fc198ba"},"__v":0,"dateModified":{"$date":"2018-04-14T20:21:31.225Z"},"public":true}
{"_id":{"$oid":"5a2ebc7cbb30a1aed43d454f"},"title":"Current Tools \u0026 Toolchains","id":"67e3ddc6-e8c2-4952-89da-3220fe1fdb66","content":{"entityMap":{"0":{"data":{"url":"https://thesweetsetup.com/"},"mutability":"MUTABLE","type":"LINK"},"1":{"data":{"url":"http://toolsandtoys.net/"},"mutability":"MUTABLE","type":"LINK"},"2":{"data":{"url":"https://sindresorhus.com/caprine/"},"mutability":"MUTABLE","type":"LINK"},"3":{"data":{"url":"https://hyper.is/"},"mutability":"MUTABLE","type":"LINK"},"4":{"data":{"url":"https://zeit.co/now"},"mutability":"MUTABLE","type":"LINK"},"5":{"data":{"url":"https://atom.io/"},"mutability":"MUTABLE","type":"LINK"},"6":{"data":{"url":"https://arwhd.co/development/2014/09/25/making-atom-home/"},"mutability":"MUTABLE","type":"LINK"},"7":{"data":{"url":"https://atom.io/packages/vim-mode-plus"},"mutability":"MUTABLE","type":"LINK"},"8":{"data":{"url":"https://medium.com/bpxl-craft/working-with-sketch-d10849739c8b"},"mutability":"MUTABLE","type":"LINK"},"9":{"data":{"url":"https://www.kaleidoscopeapp.com/"},"mutability":"MUTABLE","type":"LINK"},"10":{"data":{"url":"https://tapbots.com/tweetbot/mac/"},"mutability":"MUTABLE","type":"LINK"},"11":{"data":{"url":"https://lite.twitter.com/content/lite-twitter/en.html"},"mutability":"MUTABLE","type":"LINK"},"12":{"data":{"url":"http://mvilla.it/fenix/"},"mutability":"MUTABLE","type":"LINK"},"13":{"data":{"url":"https://github.com/qvacua/vimr"},"mutability":"MUTABLE","type":"LINK"},"14":{"data":{"url":"https://ia.net/writer/"},"mutability":"MUTABLE","type":"LINK"},"15":{"data":{"url":"https://sindresorhus.com/lungo"},"mutability":"MUTABLE","type":"LINK"},"16":{"data":{"url":"http://lightheadsw.com/caffeine/"},"mutability":"MUTABLE","type":"LINK"},"17":{"data":{"url":"https://sindresorhus.com/battery-indicator"},"mutability":"MUTABLE","type":"LINK"},"18":{"data":{"url":"https://www.spectacleapp.com/"},"mutability":"MUTABLE","type":"LINK"},"19":{"data":{"url":"https://arwhd.co/workflow/2015/08/22/Keyboard-Shortcuts/"},"mutability":"MUTABLE","type":"LINK"},"20":{"data":{"url":"http://getkap.co/"},"mutability":"MUTABLE","type":"LINK"},"21":{"data":{"url":"https://electron.atom.io/"},"mutability":"MUTABLE","type":"LINK"},"22":{"data":{"url":"https://www.baronfig.com/pages/blackbox"},"mutability":"MUTABLE","type":"LINK"},"23":{"data":{"url":"https://www.baronfig.com/pages/squire"},"mutability":"MUTABLE","type":"LINK"},"24":{"data":{"url":"https://www.apple.com/shop/product/HKMY2VC/A/lg-ultrafine-4k-display?afid=p238%7CsYm6sF50j-dc_mtid_1870765e38482_pcrid_167372724180_\u0026cid=aos-us-kwgo-pla---slid--product-HKMY2VC/A"},"mutability":"MUTABLE","type":"LINK"},"25":{"data":{"url":"http://www.shiftyjelly.com/pocketcasts/"},"mutability":"MUTABLE","type":"LINK"},"26":{"data":{"url":"https://spectrum.chat/"},"mutability":"MUTABLE","type":"LINK"},"27":{"data":{"url":"https://talky.io/"},"mutability":"MUTABLE","type":"LINK"},"28":{"data":{"url":"https://codesandbox.io/"},"mutability":"MUTABLE","type":"LINK"},"29":{"data":{"url":"https://glitch.com/"},"mutability":"MUTABLE","type":"LINK"},"30":{"data":{"url":"https://g.co/fi/r/P34ACN"},"mutability":"MUTABLE","type":"LINK"}},"blocks":[{"data":{},"entityRanges":[{"key":0,"length":15,"offset":220},{"key":1,"length":14,"offset":239}],"inlineStyleRanges":[{"style":"ITALIC","length":15,"offset":220},{"style":"ITALIC","length":14,"offset":239}],"depth":0,"type":"unstyled","text":"I always enjoy these types of posts where the author exhaustively documents the tools they use and why they enjoy it so much or whether they're on the fence about it. There are blogs dedicated to this whole concept, eg. the Sweet Setup or Tools and Toys. We get attached to our tools, more often than not we spend 6+ hours a day in front a glowing rectangle interacting with the tools we choose in exchange of our livelihoods.","key":"3bdrk"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"Now before this post gets more nihilistic, I'll just dive in.","key":"9tvtm"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"9sket"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"\u003cfigure\u003e\n\n\u003cfigcaption\u003eDesktop background from \u003ca href='https://unsplash.com/photos/VlVhOro5tf4'\u003eMax Delsid\u003c/a\u003e\u003c/figcaption\u003e\n\u003c/figure\u003e","key":"at8s8"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"6f3ov"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"header-three","text":"Main Workflow","key":"326lp"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"bagll"},{"data":{},"entityRanges":[{"key":2,"length":7,"offset":0}],"inlineStyleRanges":[{"style":"BOLD","length":7,"offset":0}],"depth":0,"type":"unstyled","text":"Caprine is a standalone Messenger.com wrapper with native macOS notification support. Switching to Android, there are dozens of Google-centric chat options, but Messenger has become my preferred communication platform. Plus there's a transparent dark mode for Caprine which is just 🔥🔥🔥.*","key":"bmikc"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"cpqpp"},{"data":{},"entityRanges":[{"key":3,"length":5,"offset":0}],"inlineStyleRanges":[{"style":"BOLD","length":5,"offset":0}],"depth":0,"type":"unstyled","text":"Hyper is a terminal built in React and Redux and is comparable to Atom Editor. I flit between this and iTerm 2 pretty frequently. I spend most of my time using a terminal, but Hyper is just special; it's so customizable and extensible with a language that I can write: JavaScript. Hyper sometimes freezes and chokes, but overall it's pretty stable. It's still awesome, maybe it's the novelty of an HTML/CSS/JavaScript terminal or the fact I started playing with it when it was still called Hyperterm. I'm hoping it will perform a little better in future and 2.0 will kick some serious ass ⚡️💕😀.*","key":"3qrdd"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"3pa4n"},{"data":{},"entityRanges":[{"key":4,"length":3,"offset":0}],"inlineStyleRanges":[{"style":"BOLD","length":3,"offset":0},{"style":"CODE","length":3,"offset":93},{"style":"CODE","length":12,"offset":141},{"style":"CODE","length":3,"offset":404}],"depth":0,"type":"unstyled","text":"Now is an instant deployment tool that rivals any I've ever used. Simply running the command now will set off a deploy that uses a project's package.json to build your application, and your app can be static or Node.js based or use Docker. It's incredibly fast and every deployment is immutable so if something is corrupt with your current deployment, going back is very simple. You can buy domains from now and manage your aliases for deployments. Plus with the desktop application you can drag and drop files and folders onto the menubar icon and get an instant deployment of them as well.👍*","key":"9g4f1"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"ec5hb"},{"data":{},"entityRanges":[{"key":5,"length":4,"offset":0},{"key":6,"length":14,"offset":147},{"key":7,"length":13,"offset":428}],"inlineStyleRanges":[{"style":"BOLD","length":4,"offset":0},{"style":"CODE","length":15,"offset":327},{"style":"CODE","length":13,"offset":428}],"depth":0,"type":"unstyled","text":"Atom is a text editor / IDE. I have used Atom since its beginning in February 2014. Back then Atom was an alternative to Coda 2, and I wrote about customizing it. Since then, I jumped between Atom and Vim full time. One of the major advantages it has for me right now over Vim, is the Git integration, the Flow plugins and the Find in Project search. I work in a large monorepo at work and that feature alone is so useful. With vim-mode-plus working in Atom, all the muscle memory of Vim key-bindings haven't really gone to waste 💻⌨️🛠💎🌈.*","key":"6kunj"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"3mje4"},{"data":{},"entityRanges":[{"key":8,"length":16,"offset":132}],"inlineStyleRanges":[{"style":"BOLD","length":6,"offset":0}],"depth":0,"type":"unstyled","text":"Sketch is a vector design tool. I like it and Figma is cool too, but I'm more of a creature of habit. I wrote a long time ago about how I use Sketch as a sideline to designing in the browser. Now that I've transitioned to more of a front-end role, I find Sketch really valuable for communicating initial intention with designers and having a point of reference ✒️📐💗.","key":"6okmh"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"5sgl9"},{"data":{},"entityRanges":[{"key":9,"length":12,"offset":0}],"inlineStyleRanges":[{"style":"BOLD","length":12,"offset":0}],"depth":0,"type":"unstyled","text":"Kaleidoscope is a really advanced file diffing/comparison tool, When I was at Black Pixel, I used this tool almost everyday. Lately, I've been finding it useful especially for negotiating between drafts or doing a comparison between two different repositories🔭🌈⚡️.","key":"f240v"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"5bqek"},{"data":{},"entityRanges":[{"key":10,"length":8,"offset":0},{"key":11,"length":12,"offset":692},{"key":12,"length":17,"offset":708}],"inlineStyleRanges":[{"style":"BOLD","length":8,"offset":0}],"depth":0,"type":"unstyled","text":"Tweetbot for Twitter because some habits are just hard to break. I have used some version of Tweetbot since 2011. Some habits just die hard. Tweetbot at the time of its initial release had lots of awesome extensions like Read Later support and inlined images from Instagram and drafted messages. I anxiously waited for their macOS application to be released and was an early beta tester. But as the years went on, it became a very aesthetic alternative to Twitter's main UI, with features that were marginal improvements over the feature set Twitter offered (kinda the best you can expect from a third-party tool). Lately, I still use Tweetbot for Mac, but in the mobile side of things I use Twitter Lite or Fenix for Android 🦅🐦📲.","key":"1uhto"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"bn10f"},{"data":{},"entityRanges":[{"key":13,"length":4,"offset":334}],"inlineStyleRanges":[{"style":"BOLD","length":3,"offset":0}],"depth":0,"type":"unstyled","text":"Vim is my tool for writing code. Vim is more of an ethic than encapsulated application. Vim has a very ubiquitous feature set (modal text editing, registers, buffers) with specific key-bindings. I want to make the ergonomics of typing code its own post. Anyway, when I want a specific desktop application for Vim, I tend to reach for VimR.","key":"chn6j"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"491jm"},{"data":{},"entityRanges":[{"key":14,"length":9,"offset":0}],"inlineStyleRanges":[{"style":"BOLD","length":9,"offset":0}],"depth":0,"type":"unstyled","text":"iA Writer I really like writing on the train and on my phone. I've used iA Writer for 3 years now and its feature set is pretty solid. It has fantastic markdown support, has support for Google Drive and includes a Night Mode.  The main reason I love working with it is that it has no toolbar or any distraction and it places a huge intention on flow.","key":"e0u2l"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"7c7ge"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"header-three","text":"Menubar Utilities","key":"18tc3"},{"data":{},"entityRanges":[{"key":15,"length":5,"offset":0},{"key":16,"length":8,"offset":42}],"inlineStyleRanges":[{"style":"BOLD","length":5,"offset":0}],"depth":0,"type":"unstyled","text":"Lungo is a replacement for the long-lived Caffeine. It prevents your Mac from dimming or falling asleep. Lungo has a retina icon (Caffeine stopped getting updated in 2009, I think) and app icon is just nice ⏰☕️.","key":"5898g"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"ekg6k"},{"data":{},"entityRanges":[{"key":17,"length":17,"offset":0}],"inlineStyleRanges":[{"style":"BOLD","length":17,"offset":0}],"depth":0,"type":"unstyled","text":"Battery Indicator is an alternative the native battery indicator on macOS. The one thing that it does is give you more feedback about your battery life at a glance 🔋🔌.","key":"3vv4"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"crre0"},{"data":{},"entityRanges":[{"key":18,"length":9,"offset":0},{"key":19,"length":7,"offset":191}],"inlineStyleRanges":[{"style":"BOLD","length":9,"offset":0}],"depth":0,"type":"unstyled","text":"Spectacle is a window management tool. It lets you move around the windows that you have open to given presets and across different displays (that's the feature that sold me on this tool). I used to use Hammerspoon (and then Phoenix.js), which I liked a lot but required a lot of configuration and struggled to easily configure moving windows between different displays.","key":"9m098"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"co3r2"},{"data":{},"entityRanges":[{"key":20,"length":3,"offset":0}],"inlineStyleRanges":[{"style":"BOLD","length":3,"offset":0}],"depth":0,"type":"unstyled","text":"Kap for screen capturing and GIF creation. It's a great a menubar app from some of the folks who work on Hyper. It replaces liceCAP for me and exports to video file or GIF.*","key":"v52"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"2pdfk"},{"data":{},"entityRanges":[{"key":21,"length":8,"offset":4}],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"* = Electron based application","key":"euiop"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"f8ge"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"header-three","text":"Equipment","key":"b3sjh"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"9t3gq"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unordered-list-item","text":"Macbook 12\" 2016","key":"e2h2"},{"data":{},"entityRanges":[{"key":22,"length":9,"offset":0},{"key":23,"length":10,"offset":12}],"inlineStyleRanges":[],"depth":0,"type":"unordered-list-item","text":"Baron Fig \u0026 Squire Pen","key":"ffj5g"},{"data":{},"entityRanges":[{"key":24,"length":23,"offset":0}],"inlineStyleRanges":[{"style":"ITALIC","length":64,"offset":27}],"depth":0,"type":"unordered-list-item","text":"LG UltraFine 4K Display -- most of the time, I have the laptop open underneath the display.","key":"2huu5"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unordered-list-item","text":"Nexus 6P","key":"9oaa4"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"9u18t"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"header-three","text":"Services \u0026 Honorable Mentions","key":"8k0pn"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"ad2aa"},{"data":{},"entityRanges":[{"key":25,"length":12,"offset":14},{"key":26,"length":8,"offset":209},{"key":27,"length":8,"offset":247}],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"I tend to use Pocket Casts for podcasts and that's becoming a pretty infrequent occasion. I use GitHub of course. Slack is a regular application I use, I'm just pretty tired of it. I am really coming to enjoy Spectrum for online community forums. Talky.io is great for video calls. I use Instapaper for collecting posts I want to read but amass only to  forget about for months at a time.","key":"a3r49"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"526c0"},{"data":{},"entityRanges":[{"key":28,"length":11,"offset":67},{"key":29,"length":6,"offset":103}],"inlineStyleRanges":[{"style":"CODE","length":16,"offset":276}],"depth":0,"type":"unstyled","text":"Online IDEs are always up in the air for me. Lately, I tend to use CodeSandbox for front-end demos and Glitch for Node.js demos. CodeSandbox has so much potential, it's essentially CodePen Projects hopped up on steroids with a magic amulet. The fact I can have an instance of create-react-app in my browser immediately and have that instance be sharable is a really powerful too.","key":"26c85"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"80col"},{"data":{},"entityRanges":[{"key":30,"length":24,"offset":121}],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"Oh, my partner and I use Project Fi instead of AT\u0026T. It's essentially the same quality at half the price. Referral code: https://g.co/fi/r/P34ACN.","key":"4h7e3"}]},"dateAdded":{"$date":"2017-12-11T17:11:46.680Z"},"public":true,"user":{"$oid":"5a06273696abf4062fc198ba"},"__v":0,"dateModified":{"$date":"2018-03-22T01:26:08.494Z"}}
{"_id":{"$oid":"5a2ebdefbb30a1aed43d4550"},"title":"Principles of Design","id":"933fa1a9-baa3-4204-b16c-e11d5ba5c93e","content":{"entityMap":{"0":{"data":{"url":"https://ia.net/know-how/on-icons"},"mutability":"MUTABLE","type":"LINK"},"1":{"data":{"url":"http://www.lukew.com/ff/entry.asp?1950"},"mutability":"MUTABLE","type":"LINK"},"2":{"data":{"url":"https://www.nngroup.com/articles/form-design-placeholders/"},"mutability":"MUTABLE","type":"LINK"},"3":{"data":{"url":"http://scotthurff.com/posts/why-your-user-interface-is-awkward-youre-ignoring-the-ui-stack"},"mutability":"MUTABLE","type":"LINK"},"4":{"data":{"url":"http://benbarry.com/project/facebook-propaganda-posters"},"mutability":"MUTABLE","type":"LINK"}},"blocks":[{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"header-three","text":"1. Simplify, Reduce Friction, Shut it Down","key":"bvu1s"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"207gr"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"Complexity is great but user interfaces aren't an Aaron Sorkin film. No one will sit and analyze it to find the deeper meaning of your UI. Simple is always going to win. Users have goals they want to achieve, post an update, change an attribute, see new content, do as little as possible to interfere with those ends. You should be doing everything you can to facilitate them and reduce any friction there may occur.","key":"ffvni"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"4po39"},{"data":{},"entityRanges":[{"key":0,"length":17,"offset":148},{"key":1,"length":12,"offset":167},{"key":2,"length":26,"offset":181},{"key":3,"length":29,"offset":264}],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"Time over, I read these posts where statistically users convert better, they stay longer when ambiguity is addressed in the design of an interface: icons versus text, dropdowns UI, placeholders versus labels. These ideas reduce friction for the user. They make it easier for them to accomplish what they came to accomplish.","key":"e5mdd"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"cpacj"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"If you can't reduce friction, maybe you need to shut down what you're doing and go back to start.","key":"6255o"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"68kvv"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"header-three","text":"2. People Matter","key":"2gmrr"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"f1i06"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"Someone will have to use what you're designing. If someone isn't going to end up using it why are you working on it? Whether that person is another employee where you're working, a person using an older phone at a bus stop on the edge network, a person sitting on their sofa with good wi-fi, someone who only may have handheld device.","key":"a3dcu"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"ckvj0"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"Each person has their own needs, concerns and goals. All of those things are variable and subject to change. We can't make assumptions about anything on the other end of the screen, not attention spans, bandwidth or device they're using. Those are just the technical things, but let's not forget about temperament, physical impairments, literacy level, and the list goes on.","key":"1neqo"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"a5kni"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"People matter, they're the reason we're doing any of this. It's important that we remember that the fewer assumptions we make about the other end the better.","key":"3k2ob"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"4j003"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"header-three","text":"3. Bananas are Fucking Awful","key":"fduer"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"This is an example of an opinion. This an opinion based solely on personal preferences. You should have them and identify them as such. Strong opinions are great, they mean you stopped to think, process and form a conclusion. But opinions (like most things) have a context. In the case of the bananas, it's personal preference; not a matter of ontological truth or gospel.","key":"6vgi8"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"Opinions are not high deities. Share them with the expectation they'll change and that others may influence your thinking.","key":"8qcf0"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"744ah"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"header-three","text":"4. Abstraction is Your Friend","key":"5985u"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"In terms of computer science, when programmers refer to abstraction they mean an instance being separated from a specific implementation. This is a valuable idea to apply to design. Having good abstractions make building systems easier and more congruent. Embrace this idea, let it sink while you're working.","key":"ptlo"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"14gu2"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"header-three","text":"5. Leave Things Better than You Found Them","key":"6mnkv"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"This is a quote from the Lord Baden-Powell, \"Leave this world a little better than you found it.\" He founded the Scouts and was British. I thought it was an original idea from the early Barney the Dinosaur videos from the early 90s. You know what, you learn something new everyday; thanks Internet! Regardless it's still great advice.","key":"eglca"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"71s2i"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"header-three","text":"6. Name Your Open Source Projects Obscurely","key":"6osv7"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"Come on, this is just good sense.","key":"fuq08"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"2vo12"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"header-three","text":"7. Break Things, Set Them On Fire If They're Bad","key":"eo34k"},{"data":{},"entityRanges":[{"key":4,"length":26,"offset":47}],"inlineStyleRanges":[{"style":"ITALIC","length":26,"offset":47}],"depth":0,"type":"unstyled","text":"There's this propaganda from Facebook known as 'Move Fast \u0026 Break Things', now that may not be how they currently operate but it's the idea that you should sacrificing for the immediate goal. This idea can be healthy in given situations, but I like a different concept: break things and set them fire if they're bad.","key":"9p5ch"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"This idea is different, it's the idea that you should see if things can break easily you should identify them and if they're bad get rid of them. Ideas that can be broken easily aren't worth repairing if they're failed from the start and you'll waste more time in the long run justifying them. They're dead weight in pursuit of a focused goal.","key":"ddsu2"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"42jfc"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"header-three","text":"8. You're Still Doing it Wrong","key":"alhn8"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"When you start doing anything, you will do it wrong. It's an inevitability of being novice at anything new. At times it can be healthy to have a critical analysis of what you're doing and assume as an intellectual exercise that you're still doing it wrong. You can pinpoint areas and ways you maybe failing and highlight ways you're succeeding.","key":"er0i3"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"83t7q"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"header-three","text":"9. Give it 5 Minutes","key":"fj2ej"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"Anything complicated or new or strange that you need to work with or adapt to is going to foster some frustrations. Sometimes those frustrations grow and erupt. But anything that frustrates you in that way is probably worth doing and worth doing well. So when you get to that point, give it five minutes, just 5 minutes. Get up, walk around the block, make coffee, tweet a funny GIF, better yet step away from screens entirely, listen to 'Monkey's Gone to Heaven' by the Pixies (that's not even 3 minutes). Step away, you'll be glad you did.","key":"5m84g"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"3tduk"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"header-three","text":"10. Thoughtful Always Trumps Clever","key":"eo8cd"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"This harkens back to the first principle. Between Dribbble, Designer News, Hacker News, CodePen and any other Internet thing, there will be tons of clever new ideas or interesting techniques. They may be cool and the desire to implement them in a project maybe strong, but fight it. They may not fit the needs of your project or be clear to your users. Most people aren't inundated with the same type of content you are and that's easier to forget than you might think. Always attempt to be thoughtful and intentional with your design choices.","key":"4tdsc"}]},"dateAdded":{"$date":"2017-12-11T17:14:54.301Z"},"public":true,"user":{"$oid":"5a06273696abf4062fc198ba"},"__v":0,"dateModified":{"$date":"2018-04-23T03:01:58.411Z"}}
{"_id":{"$oid":"5a2ec1ffbb30a1aed43d4551"},"title":"Mocking Data Quickly","id":"d29042e3-f64c-46ce-930b-e98e477e6b32","content":{"entityMap":{"0":{"data":{"url":"https://www.lukew.com/ff/entry.asp?927"},"mutability":"MUTABLE","type":"LINK"},"1":{"data":{"url":"http://chancejs.com/"},"mutability":"MUTABLE","type":"LINK"},"2":{"data":{"url":"https://zeit.co/now"},"mutability":"MUTABLE","type":"LINK"}},"blocks":[{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"Recently I've been needing to make a lot of demos really quickly. Every time I needed to mock out some UI components like a table view or a list view, data was really important. But Lorem ipsum is unpredicatable and most users would never input such shitty Latin. Cierco is never going to use your app, I'm sorry.","key":"466oq"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"3u5sa"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"By the way, Luke Wroblewski cover this pretty vividly:","key":"852no"},{"data":{},"entityRanges":[{"key":0,"length":15,"offset":415}],"inlineStyleRanges":[],"depth":0,"type":"blockquote","text":"Using dummy content or fake information in the Web design process can result in products with unrealistic assumptions and potentially serious design flaws. A seemingly elegant design can quickly begin to bloat with unexpected content or break under the weight of actual activity. Fake data can ensure a nice looking layout but it doesn't reflect what a living, breathing application must endure. Real data does. -- Luke Wroblewski","key":"d9um5"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"I've typically stubbed out an object to match the design I needed, copy that same object a dozen times and there, you got yourself a poorly maintained fake array. This data is fake, now if you need to do something quick and dirty, we should aim for something that takes the shape of the data we need and looks similar to the API we need to work with later on. In other words, not as fake data.","key":"73p9k"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"2d3d7"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"I never want to create a manual stub ever again. It is so tedious. Manual stubs aren't effective because you'd need manually change something everywhere if you need tweak part of your object. Let's try and avoid that.","key":"djrhr"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"1o0ss"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"header-three","text":"Randomly Creating Fake Data","key":"8k7n6"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"ab1n2"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"So let's try something a little different to work with. Create an empty array.","key":"cq7vg"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"296hi"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"code-block","text":"const List = Array(50).fill()","key":"1b2rg"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"atbeh"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"There's a probably a better way to create a fake array but I can't think of one. I'm not on trial. Get off my back. I'm sorry writing code in public makes me tense...","key":"40r75"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"ah4e3"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"Okay, I'm better now.","key":"5bjsb"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"9qm8b"},{"data":{},"entityRanges":[{"key":1,"length":9,"offset":56}],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"Now we need to create our fake schema. I'm going to use Chance.js, it's a great way to randomly produce predictable results we can start to work with.","key":"2505j"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"9hnjs"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"I need to create a member list for a directory application in a coding interview a month ago and here's what I did:","key":"f9kto"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"11a8n"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"code-block","text":"import Chance from 'chance'\n\nconst schema = chance =\u003e ({\n  id: chance.guid(),\n  avatar: chance.avatar({ protocol: 'https', fileExtension: 'jpg' }),\n  memberSince: chance.year({ min: 1980, max: 2017 }),\n  maritalStatus: chance.weighted(['Single', 'Engaged', 'Married', 'Divorced'], [1, 2, 3, 4]),\n  name: chance.name(),\n  age: chance.age(),\n  phone: chance.phone(),\n  email: chance.email(),\n  address: [\n    {\n      name: 'Home',\n      value: chance.address()\n    },\n    {\n      name: 'Work',\n      value: chance.address()\n    }\n  ]\n})\n\nList.map(i =\u003e schema(new Chance()))","key":"2tb2d"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"drge2"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"We can use Chance to make a schema like object that's similar to the data we need to work with and not copied and pasted by hand. And when we need to change the shape we can change it in one place and have less to manage.","key":"7c1k7"},{"data":{},"entityRanges":[],"inlineStyleRanges":[{"style":"CODE","length":4,"offset":37},{"style":"CODE","length":11,"offset":67}],"depth":0,"type":"unstyled","text":"At the end we're mapping through the List Array we created because Array.map() returns another Array. Now we're passing a new instance of Chance to make sure each item in the new Array is unique.","key":"3m59d"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"Map through the results and get a new array of each of those empty spaces filled with your schema.","key":"7095b"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"ai5lg"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"code-block","text":"import data from './path-to-the-other-shit'\nimport Cell from './some-stateless-function'\n\nclass App extends React.Component {\n  state = {\n    results: data\n  }\n\n  render() {\n    return (\n      \u003cWrapper\u003e\n        {this.state.results.map((result, i) =\u003e \u003cCell key={i} {...result}/\u003e)}\n      \u003c/Wrapper\u003e\n    )\n  }\n}\n","key":"acksi"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"7kko9"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"header-three","text":"Bonus Points","key":"anrpa"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"dfe43"},{"data":{},"entityRanges":[{"key":2,"length":10,"offset":221}],"inlineStyleRanges":[{"style":"CODE","length":3,"offset":228}],"depth":0,"type":"unstyled","text":"Deploy this sucker! I've found that it's probably a good idea to not make the client-side do something the server will inevitably do, don't. It's not so hard to deploy a simple server with an instance of this faked data. Zeit's now (which I love and it's what this site is deployed on) makes it less burdensome to work with.","key":"314ad"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"ao6d7"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"All you need to deploy the same code is:","key":"56ebi"},{"data":{},"entityRanges":[],"inlineStyleRanges":[{"style":"CODE","length":8,"offset":0}],"depth":0,"type":"unstyled","text":"index.js:","key":"5315e"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"2tjeb"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"code-block","text":"const { send } = require('micro')\nconst data = require('./path-to-the-other-shit')\n\nmodule.exports = async (req, res) =\u003e send(res, 201, { results: data })","key":"9gnbh"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"3jqhd"},{"data":{},"entityRanges":[],"inlineStyleRanges":[{"style":"CODE","length":12,"offset":0}],"depth":0,"type":"unstyled","text":"package.json:","key":"1mapf"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"7actq"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"code-block","text":"{\n  \"name\": \"mydemo\",\n  \"start\": \"node index.js\",\n  \"dependencies\": {\n    \"micro\": \"latest\"\n  }\n}","key":"46ad"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"u2gv"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"Then run this in the root of that project:","key":"1hp12"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"6cerm"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"code-block","text":"now","key":"5h222"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"q6h0"},{"data":{},"entityRanges":[],"inlineStyleRanges":[{"style":"CODE","length":3,"offset":4}],"depth":0,"type":"unstyled","text":"And now will give you a URL you can do a GET request to and have it return your randomly faked data that similar to what data you're actually looking for in your demo or proof-of-concept.","key":"fuiqe"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"2mmge"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"I keep finding this takes maybe 10 minutes or less to setup and has so much payoff as I'm working on something.","key":"e1d09"}]},"dateAdded":{"$date":"2017-12-11T17:35:48.518Z"},"public":true,"user":{"$oid":"5a06273696abf4062fc198ba"},"__v":0,"dateModified":{"$date":"2018-04-23T07:12:48.762Z"}}
{"_id":{"$oid":"5a2ec20bbb30a1aed43d4552"},"title":"Centaurs","id":"aa3dd293-2a0e-478c-81e7-a0b9733e8b4a","content":{"entityMap":{"0":{"data":{"url":"http://jon.gold/2017/08/dragging-rectangles/"},"mutability":"MUTABLE","type":"LINK"}},"blocks":[{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"We have gotta be done with the 'should designers code?' discussion right? What about the follow up conversations about the nature of what a designer is and the narrowing definitions of code itself? Do we need another several-thousand word Medium post about these loose and undulating definitions? The Gettysburg Address was a 272 words and Psalm 23 is only 116 words; I don't really know what I'm getting at other than your fucking think-pieces should be shorter than the Magna Carta.","key":"ci9n6"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"e709o"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"Beyond that, these aren't interesting discussions. They impose rhetoric on tactile behavior and they often narrowly scope the work and value of complicated work.","key":"7omkb"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"eelg3"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"When we finally find someone who withstands the really brittle definitions of what we call a designer who can also write code and speak into that language, then they get assigned this appellation \"unicorn\". That's word doesn't do a whole lot to cloak the complexity or even sound reassuring. Personally, I think it's always sounded a little reductionist. Supposedly the term \"unicorn\" is about scarcity versus about being mythical. But at the end of the day unicorn is a horse with an extra appendage, and from fables lost in the Great Flood. How does that instill confidence or value to this supposed renaissance person?","key":"ceag6"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"18upm"},{"data":{},"entityRanges":[],"inlineStyleRanges":[{"style":"ITALIC","length":8,"offset":138}],"depth":0,"type":"unstyled","text":"If you're going to pick something fictitious to describe these hybrid super humans, why not something strong and powerful? My preference, Centaurs. Centaurs are powerful creatures that roam in herds and is something that's actually two things.","key":"eaqr7"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"8ucek"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"header-three","text":"Space Between","key":"9pe7g"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"38gt3"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"I'm noticing more companies are investing in this intersection and placing more emphasis on the nimble ability to be ambidextrous. There's definite expanse between the two extremes of design and development but that doesn't mean that there isn't value in exploring people sit in that expanse. Maybe a better question is: are the extremes of these two disciplines actually extremes?","key":"n955"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"el152"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"I would say no. These two groups are typecast as dreamers and schemers; with designers defining the experience and developers executing that experience. This has never been my relationship with other designers or other developers. The best version of the dynamic is exposing intention and enabling possibilities from both parties.","key":"52cmd"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"ag3u2"},{"data":{},"entityRanges":[{"key":0,"length":27,"offset":46}],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"Communicating intentionality is difficult and design tools haven't helped. It seemed like there was a solid 6 months in 2015 where everywhere I looked people were talking about the slew of prototyping tools that were either coming out or shutting down. Static assets don't communicate intentionality, user flow or even animation.","key":"6lsjk"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"3m5up"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"The best dynamic between these implied extremes is mutual respect and lowering the barrier entry on either \"end\". When it's easy for engineers to give feedback and help iterate through the design process and easy for designers to interact with working prototypes, each \"end\" is more informed. This doesn't mean living in each others pockets, it's realizing that there's value from every member trying to deliver the same experience.","key":"d7otm"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"Should designers jump into code and help with prototyping? Absolutely. Should engineers ask more questions early in the formative stages about what they're developing? Absolutely. Should there be a Freaky Friday moment where designers become developers until they realize they were better off before and realize their true worth? I'm going to let a more existential person answer that question.","key":"bv8di"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"8svom"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"Both \"ends\" of this spectrum are really the same set of talents applied in different mediums with the same goal in mind. I believe in more in the idea of centaurs than I am of unicorns who can do everything. Centaurs have a herd-mentality and roam together.","key":"1thse"}]},"dateAdded":{"$date":"2017-12-11T17:36:05.651Z"},"public":true,"user":{"$oid":"5a06273696abf4062fc198ba"},"__v":0,"dateModified":{"$date":"2018-04-23T07:42:09.092Z"}}
{"_id":{"$oid":"5a2ec5e3bb30a1aed43d4553"},"title":"Testing UI","id":"50d2697b-4fb1-4343-99b6-e4aadfc3094f","content":{"entityMap":{"0":{"data":{"url":"https://github.com/facebook/jest"},"mutability":"MUTABLE","type":"LINK"},"1":{"data":{"url":"https://flow.org/"},"mutability":"MUTABLE","type":"LINK"},"2":{"data":{"url":"https://www.typescriptlang.org/"},"mutability":"MUTABLE","type":"LINK"},"3":{"data":{"url":"https://medium.freecodecamp.org/the-right-way-to-test-react-components-548a4736ab22"},"mutability":"MUTABLE","type":"LINK"},"4":{"data":{"url":"airbnb.io/enzyme/"},"mutability":"MUTABLE","type":"LINK"},"5":{"data":{"url":"https://facebook.github.io/jest/docs/en/snapshot-testing.html"},"mutability":"MUTABLE","type":"LINK"},"6":{"data":{"url":"https://www.viget.com/articles/acceptance-testing-react-apps-with-jest-and-nightmare"},"mutability":"MUTABLE","type":"LINK"},"7":{"data":{"url":"https://www.viget.com/articles/acceptance-testing-react-apps-with-jest-and-nightmare"},"mutability":"MUTABLE","type":"LINK"},"8":{"data":{"url":"https://product.voxmedia.com/2016/4/20/11458814/how-designers-can-use-unit-testing-to-build-resilient-and-happy-design-systems"},"mutability":"MUTABLE","type":"LINK"},"9":{"data":{"url":"https://medium.freecodecamp.com/the-right-way-to-test-react-components-548a4736ab22"},"mutability":"MUTABLE","type":"LINK"},"10":{"data":{"url":"https://auth0.com/blog/testing-react-applications-with-jest/"},"mutability":"MUTABLE","type":"LINK"},"11":{"data":{"url":"https://medium.com/@newyork.anthonyng/testing-react-components-state-b57bfc712b90"},"mutability":"MUTABLE","type":"LINK"},"12":{"data":{"url":"https://facebook.github.io/jest/docs/tutorial-react.html"},"mutability":"MUTABLE","type":"LINK"}},"blocks":[{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"Up until about 6 months ago, I had never really written any unit tests for code I had written. It just wasn't a part of my routine. When I started working on a team full-time, testing felt like it pretty much consumed every decision I made.","key":"218vj"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"ejju"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"But upfront, before we get started, I should probably tell you I do not care about the semantics and differences between TDD and BDD. I'm only really interested in the practical, in-the-weeds ideas on testing; honestly I don't know why those two strategies are often pitched as mutually exclusive.","key":"39rgh"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"5lq8j"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"With the product I work on, we have two types of tests:","key":"fbt1h"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"ordered-list-item","text":"Our integration test suite, which is the end-to-end test","key":"5alu8"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"ordered-list-item","text":"A pile of unit tests we inherited and other assorted piles of unit tests we don't run very often (and by we, I mean me)","key":"eba49"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"comvu"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"Integration testing is very high value; it puts a strict emphasis on user needs, user flows and edge cases. They take a good bit of time to write and are very frequently run against features or discover points of failure system-wide aside from changes. More technically though, it's built using Nightmare.js and Mocha/Chai.","key":"tgj8"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"5ujf6"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"header-three","text":"Code Coverage","key":"7qo7u"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"4sfnj"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"Typically, we don't worry about code coverage. I wish we would, but it's a shared opinion that code coverage numbers aren't a significant enough evaluation of overall system health, and if we're going to quantify value of code coverage it does rank lower than integration testing or unit testing.","key":"4j9rv"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"63q42"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"header-three","text":"Unit Testing","key":"1078d"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"215ln"},{"data":{},"entityRanges":[],"inlineStyleRanges":[{"style":"CODE","length":9,"offset":115}],"depth":0,"type":"unstyled","text":"Our unit tests largely revolve around the React components that we write. In a perfect world, every component gets propTypes, a unit test and component-level styles.","key":"2mp82"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"8965k"},{"data":{},"entityRanges":[{"key":0,"length":4,"offset":165}],"inlineStyleRanges":[{"style":"ITALIC","length":531,"offset":0}],"depth":0,"type":"unstyled","text":"A quick note about Mocha. I really don't like Mocha, Chai, Sinon or Istanbul. I don't like them enough to consider other sources of caffeine. I have a huge bias for Jest. I like it a lot (mostly because I have the most familiarity with it). It very easily covers the concerns of the previous 4, it's faster, it doesn't silo the documentation into too many random places, and it can help auto-mock dependencies and uses snapshot testing which I love for working with React components. Now back to your regularly scheduled blog post.","key":"d0sbs"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"ea3j"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"So I've started to ask a lot of questions about what testing code is for and the role it should play as we're building shared UI components.","key":"eveuv"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"blockquote","text":"If unit testing is about testing the code I wrote without the bother of everything else, where is there more value in testing? Will a user ever arrive in a context where they reach this component in isolation like this? The code that's tested comprises a UI that goes out in front of users. Wouldn't it follow that testing the user facing portion of it is just as valuable as testing a block of code?","key":"flt79"},{"data":{},"entityRanges":[],"inlineStyleRanges":[{"style":"CODE","length":13,"offset":203}],"depth":0,"type":"unstyled","text":"I don't think we as UI engineers ever want to test React or its lifecycle, there are teams at Facebook who are in charge of that. I expect React to do the things it says on the tin. I want to test if my \u003cComponent /\u003e performs what I design it to do.","key":"3gde3"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"9gu9e"},{"data":{},"entityRanges":[{"key":1,"length":4,"offset":211},{"key":2,"length":10,"offset":219}],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"A lot of tests I write test whether the input of something is a certain type, like an object, an array, a date and an HTML element. Frankly, this kind of checking can get resolved with static type analysis with Flow or TypeScript.","key":"1f99e"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"u908"},{"data":{},"entityRanges":[{"key":3,"length":9,"offset":127}],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"So if I'm testing a React Component and the previous two sets of details, writing a unit test becomes a little more difficult. This post gives a practical look into a lot methods to writing unit tests for React, but using snapshots can resolve a lot of that very quickly.","key":"6kkki"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"2gheu"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"Well, then what do we test? Testing the composition of components can be an investing idea. Let's say we had this component for a new feature:","key":"cep25"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"4koaj"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"code-block","text":"class Feature extends Component {\n  state = {\n    title: '',\n    body: '',\n    dateAdded: new Date(),\n    preferences: this.props.preferences\n  }\n\n  onSubmit = () =\u003e fetch('/api/endpoint',  {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(this.state)\n  })\n\n  render() {\n    return (\n      \u003cform onSubmit={this.onSubmit}\u003e\n        \u003cInput\n          label='title'\n          value={this.state.title}\n          onChange={e =\u003e this.setState({ title: e.target.value })}\n        /\u003e\n        \u003cArea\n          value={this.state.body}\n          onChange={e =\u003e this.setState({ body: e.target.value })}\n        /\u003e\n        \u003cfooter\u003e\n          \u003cButton\n            title='Cancel'\n            onClick={this.onCancel}\n          /\u003e\n          \u003cButton\n            disabled={this.state.title.length !== 0}\n            title='Submit'\n            onClick={this.onSubmit}\n          /\u003e\n        \u003c/footer\u003e\n      \u003c/form\u003e\n    )\n  }\n}","key":"dqnpg"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"mneb"},{"data":{},"entityRanges":[{"key":4,"length":6,"offset":13}],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"We could use Enzyme to mount this component in a JSDOM environment (with mocked XHRs) and use Enzyme to pretend to interact with the component. We could write several test cases like this:","key":"6hbfi"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"ahr5r"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"code-block","text":"describe('Feature', () =\u003e {\n    xit('submits form w/o preference')\n    xit('doesn\\'t submit form w empty fields')\n    xit('unmounts the Component on Cancel')\n    xit('posts with new date')\n})\n","key":"5if0f"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"This gives a look at what I feel is the value of testing your components: single encapsulation of a user-facing feature and then dealing with what this component should do with a focus on user behavior.","key":"d0io6"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"f2er0"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"By giving these tests a user focus, your acceptance criteria for your story can easily be ported to be your actual test cases.","key":"37u61"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"c8r2b"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"If you're going to write a unit test at all for your code, (seriously, type checking can get a shit-load done for you if you lean into it), there should be a baseline for working on unit tests.","key":"cf55b"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"9kp67"},{"data":{},"entityRanges":[{"key":5,"length":16,"offset":0}],"inlineStyleRanges":[{"style":"CODE","length":5,"offset":552}],"depth":0,"type":"unstyled","text":"Snapshot testing with Jest is a topic worthy of its own post but I think it can be really valuable. A snapshot creates a  tree that describes the React component in a snapshot file (commit these into version control). As you're working through a refactor, your test runner will run against the snapshot and verify that it's still rendering correctly. On the surface this doesn't seem really valuable, but most of the time you're working on a refactor, we want to make sure we're not causing any changes to the UI and our components are handed back the props and rendering the same way. Since they're fairly easy to write they're the kind of test that feels trivial to have as a part of your workflow.","key":"74lo9"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"5tkm1"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"code-block","text":"import React from 'react'\nimport Feature from '../Feature'\nimport renderer from 'react-test-renderer'\n\n\ndescribe('Feature', () =\u003e {\n    xit('submits form w/o preference')\n    xit('doesn\\'t submit form w empty fields')\n    xit('unmounts the Component on Cancel')\n    xit('posts with new date')\n\n    it('renders correctly', () =\u003e {\n      const tree = renderer.create(\u003cFeature /\u003e).toJSON()\n      expect(tree).toMatchSnapshot()\n    })\n})","key":"ar86o"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"a15pl"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"Unit tests should be very easy to write, mocking out dependencies is tedious and isolating the scope of our module is time consuming. The more labor-intensive this process becomes the harder it is to write tests. That's one of the things I love about React + Jest: the isolation comes for free with good component hierarchies and Jest + Enzyme make mocking out dependencies relatively straight-forward.","key":"6fmfb"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"biv2s"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"header-three","text":"Acceptance Testing with Nightmare.js","key":"fpqu5"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"atip0"},{"data":{},"entityRanges":[{"key":6,"length":20,"offset":53}],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"But there's value in what I've come to understand as 'acceptance testing'. In a really boring explanation it's a way to measure our software against user's needs and/or business requirements to see if it's \"acceptable\" for release. For more of the context, I see it as a technique to observe our whole UI and user flows versus testing just a single component.","key":"6mqib"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"7k6a8"},{"data":{},"entityRanges":[],"inlineStyleRanges":[{"style":"CODE","length":7,"offset":123},{"style":"CODE","length":14,"offset":156}],"depth":0,"type":"unstyled","text":"In the case of something like Next.js or CRA or any locally running application, we could use Nightmare.js or Puppeteer to visit() our whole application at localhost:3000 and start making assertions about our application in a real browser environment, not mocked out one, under real conditions.","key":"6j59n"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"7oe5s"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"code-block","text":"import nm from 'nightmare'\n\ndescribe('New Feature to update profiles', () =\u003e {\n    it('Feature updates profile', async () =\u003e {\n        let page = nm().goto('http://localhost:3000')\n\n        let result = await page\n            .type('.Feature input', 'Allison')\n            .click('.Feature [type=submit]')\n            .wait('.Profile')\n            .evaluate(() =\u003e document.querySelector('.Profile h1').textContent)\n            .end()\n\n        let cancelledResult = await page\n            .type('.Feature input', 'Allison')\n            .click('.Feature .btn-cancel')\n            .wait('.Profile')\n            .evaluate(() =\u003e document.querySelector('.Profile h1').textContent)\n            .end()\n\n        expect(result).toContain('Allison')\n        expect(cancelledResult).toContain('Sandra')\n    })\n})\n","key":"6a9su"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"51uqa"},{"data":{},"entityRanges":[],"inlineStyleRanges":[{"style":"ITALIC","length":78,"offset":493}],"depth":0,"type":"unstyled","text":"I think that by itself has more value than just unit tests by themselves. It gives us the opportunity to apply user-facing language to the features we're making. Like I said earlier about  unit tests: giving these tests a user focus, your acceptance criteria for your story can easily be ported to be your actual test cases. Acceptance testing is the more traditional venue for these tests, but having this ethic in both places ensures you can be giving feedback to other members of your team in the same language that you were tasked with for the feature in front of you.","key":"btoj5"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"djl2q"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"header-three","text":"Key Observations","key":"473gp"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"4mmkp"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"So I don't have much of a point in this post other than being exposed to a lot of different types of UI testing, but here are some trends I've observed in the process:","key":"3e6eu"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"ordered-list-item","text":"React is really good at isolating concerns for testing.","key":"botin"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"ordered-list-item","text":"Unit testing should be low-hanging fruit, and I've come to find that Jest and Enzyme can make unit tests easy to write when you write components that are simple and logical to follow, ie. valuing composition over inheritance.","key":"1okts"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"ordered-list-item","text":"Snapshot testing is trivial to execute and wonderful for sanity checking in any large refactor.","key":"4un3"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"ordered-list-item","text":"Tests need to have a user facing value wherever possible.","key":"7r6mi"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"ordered-list-item","text":"Recreating the universe is wonderful and everything but there's a value on how our application runs under real conditions.","key":"bani3"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"advq1"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"header-three","text":"Further Reading","key":"8lp29"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"2c78t"},{"data":{},"entityRanges":[{"key":7,"length":51,"offset":0}],"inlineStyleRanges":[],"depth":0,"type":"unordered-list-item","text":"Acceptance Testing with Nightmare.js \u0026 Jest | Viget","key":"77dkc"},{"data":{},"entityRanges":[{"key":8,"length":90,"offset":0}],"inlineStyleRanges":[],"depth":0,"type":"unordered-list-item","text":"How designers can use unit testing to build resilient and happy design systems | Vox Media","key":"a1kr1"},{"data":{},"entityRanges":[{"key":9,"length":53,"offset":0}],"inlineStyleRanges":[{"style":"ITALIC","length":27,"offset":56}],"depth":0,"type":"unordered-list-item","text":"The Right Way to Test React Components | FreeCodeCamp — this one is super practical","key":"a9b86"},{"data":{},"entityRanges":[{"key":10,"length":44,"offset":0}],"inlineStyleRanges":[{"style":"ITALIC","length":23,"offset":47}],"depth":0,"type":"unordered-list-item","text":"Testing React Applications with Jest | Auth0 — super barebones example","key":"90f71"},{"data":{},"entityRanges":[{"key":11,"length":44,"offset":0}],"inlineStyleRanges":[],"depth":0,"type":"unordered-list-item","text":"Testing React Component’s State | Anthony Ng — more about using enzyme for testing react components","key":"1mj2v"},{"data":{},"entityRanges":[{"key":12,"length":40,"offset":0}],"inlineStyleRanges":[],"depth":0,"type":"unordered-list-item","text":"Testing React Apps with Snapshots | Jest — using snapshot testing with jest","key":"1987s"}]},"dateAdded":{"$date":"2017-12-11T17:52:23.305Z"},"public":true,"user":{"$oid":"5a06273696abf4062fc198ba"},"__v":0,"dateModified":{"$date":"2018-04-23T23:53:25.454Z"}}
{"_id":{"$oid":"5a4337147cad6407cb30b19f"},"title":"Hello","id":"7c4f52e6-771d-4606-a1f6-c9f2e8bbb6f3","content":{"blocks":[{"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"What is going on...","key":"1pe5t"}]},"dateAdded":{"$date":"2017-12-27T05:55:30.930Z"},"public":false,"__v":0}
{"_id":{"$oid":"5a9249b411dba4a35ce2bde1"},"title":"Something","id":"9a0bd7d3-e795-4ee8-a3a3-dc26c63022e7","content":{"entityMap":{},"blocks":[{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"Hello What's up.","key":"f7t9l"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"bjq48"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"Adding a thing.","key":"ai85o"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"8rqki"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"Not sure what's going to happen.","key":"fu0c6"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"Something. else. anything","key":"9ui3t"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"b02rp"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"We should assess the state of the autosaving functionality. It's really important.","key":"1e9p7"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"bvikv"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"4tld9"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"2ha35"}]},"dateAdded":{"$date":"2018-02-25T05:29:18.106Z"},"public":true,"user":{"$oid":"5a06273696abf4062fc198ba"},"__v":0,"dateModified":{"$date":"2018-04-30T05:16:26.819Z"}}
{"_id":{"$oid":"5a93505e11dba4a35ce2bde2"},"title":"Adding a New Post","id":"0f9b0384-c768-4879-93eb-65471ff81a48","content":{"entityMap":{},"blocks":[{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"Hello Hello","key":"5i2a9"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"Hello","key":"7f26n"}]},"dateAdded":{"$date":"2018-02-26T00:09:47.188Z"},"public":true,"user":{"$oid":"5a06273696abf4062fc198ba"},"__v":0,"dateModified":{"$date":"2018-04-30T07:35:38.486Z"}}
{"_id":{"$oid":"5aa1f61bbd471923bf33cc6d"},"title":"Offline Ethics","id":"075a70d3-6014-4be7-8239-4c4667b87acc","content":{"entityMap":{"0":{"data":{"url":"http://tripleodeon.com/2010/10/not-a-mobile-web-merely-a-320px-wide-one/","href":"http://tripleodeon.com/2010/10/not-a-mobile-web-merely-a-320px-wide-one/"},"mutability":"MUTABLE","type":"LINK"},"1":{"data":{"url":"https://serviceworke.rs/","href":"https://serviceworke.rs/"},"mutability":"MUTABLE","type":"LINK"}},"blocks":[{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"Living in Tacoma and working Seattle, leaves you sitting on the train a lot. Now don't get me wrong there's a wonderful pendulum swing between regained distraction-free productivity or restful reflection and the caged-feeling of being aligned to a schedule you have no control over coupled with being locked in a metal cage hurling 60-70 MPH. Regardless of how I've felt, the Sounder Train does over free wi-fi, when the train is near empty it's perfect, when it's at a more normal capacity the connect feels like a notch below coffee shop quality and when it's standing room only, it's not existent. All of that is to be expected and understandable entirely, but nonetheless frustrating when you're trying to refresh Twitter or message someone.,","key":"73qvh"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"\nBut websites and web applications for the most part are really bad at responding to those challenges, even though there are APIs that browsers have that can tell you exactly what kind of connection the user has available to them.","key":"h23h"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"\nAt a bare minimum a site or application should be able to be able to work offline even if the definition of \"work\" is narrowed for your user.\nThere is an ethic you should provide your user should be able to rely on, and it's only fair, they were kind enough to give your their time, attention or even money. I've stripped this down to almost three principles:\n","key":"8sh25"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"ordered-list-item","text":"Users should know they've gone offline","key":"32for"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"ordered-list-item","text":"Don't prevent, Batch and Dispose","key":"fgat2"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"ordered-list-item","text":"Picking up where you left off is paramount","key":"150rn"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"brlvi"},{"data":{},"entityRanges":[],"inlineStyleRanges":[{"style":"ITALIC","length":8,"offset":150}],"depth":0,"type":"unstyled","text":"Before we dive in further, we should enumerate the facets about any given user trying to interact with our site or application. The answer is simple: nothing. There is not one single thing we can assume about a user at any given time. Not their attention span, not the chair they may or may not be sitting in, not physical handicap they possess, not how much time they have to do something -- none of these things can be assumed.\nPut a little more eloquently:","key":"9tci6"},{"data":{},"entityRanges":[{"key":0,"length":56,"offset":382}],"inlineStyleRanges":[{"style":"ITALIC","length":438,"offset":0}],"depth":0,"type":"blockquote","text":"The fact that the user has a small screen in their hand is one thing – the fact that it is in their hand at all is another. The fact that the user may be walking, driving, or lounging is yet another. In fact, it’s quite likely that they really deserve different content and services altogether – or, at least, a differently prioritized version of the default desktop experience. -- James Pearce \"Not a mobile web, merely a 320px-wide one\"","key":"1gmsl"},{"data":{},"entityRanges":[],"inlineStyleRanges":[{"style":"ITALIC","length":21,"offset":432}],"depth":0,"type":"unstyled","text":"This was one of the more original tenants of \"responsive web design\", that the user should be able to access a site, on any device without impeding their desired goal. That the site \"just works\" or that it \"works\" everywhere. Now as frustrating and reductionist as that goal might be, it should encompass the idea that their device could be in any state. Meaning, we can not assume a devices: battery life, orientation, location or network connectivity.","key":"9ls6a"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"\nThe power of the web is that is the most ubiquitous  platform in existence, accessible through software installed in almost any device on the market.\nAnd yea we're going to need a better word than \"ubiquitous\" because:\n","key":"kotv"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"ordered-list-item","text":"It's not very descriptive to the point where it's not a description at all.","key":"995v1"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"ordered-list-item","text":"I can never remember how to spell it.","key":"ed73j"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"5lqil"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"header-three","text":"Users should know they've gone offline","key":"4ne96"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"dqd29"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"Devices lose connection to the Internet -- it is literally the common occurrence that can happen to an internet connected device. Bills come due, routers fail, networks overload, devices get stupid, all a part of the experience of trying to connect to the internet. If your user tried to refresh the browser. Your user will likely be unaware site should be able to respond.\nAs a side, this isn't just about optimizing for a mobile device. I travel with a 2017 15\" Macbook Pro. I'm not sitting at my desk all day with it under pristine connection. I still want to be reasonably productive when I have a less than optimal connection or am offline entirely.\n","key":"5ap72"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unordered-list-item","text":"Listener on the online offline","key":"bb18b"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unordered-list-item","text":"Basic service worker","key":"eo3h4"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unordered-list-item","text":"listening for network conditions in Chrome","key":"27vr9"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"a8a4g"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"header-three","text":"Don't Disable, Batch \u0026 Dispose","key":"992r9"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"2p1tq"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"If you can't make a fetch() POST or PUT save the content in localstorage and when the network becomes available again give the user the option to retry sending the submission and dispose of what's in localstorage. or if a draft of something exists in localstorage show that in the UI.\n","key":"4po2g"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unordered-list-item","text":"Browser support of localstorage","key":"7p1eh"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unordered-list-item","text":"Browser support of fetch","key":"5tsjg"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"Enable the user don't disable their workflow because of the lack of network connectivity.\n","key":"dcnk8"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"header-three","text":"Pick up where they left off","key":"akjdo"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"7arac"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unordered-list-item","text":"Client side routers","key":"fjs6t"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unordered-list-item","text":"Save for Offline","key":"e182s"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unordered-list-item","text":"Gatsby's local data model","key":"f4i88"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"clj9i"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"header-three","text":"Offline Resources","key":"ab8j1"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unstyled","text":"","key":"2all"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unordered-list-item","text":"Service Worker","key":"cs9ek"},{"data":{},"entityRanges":[],"inlineStyleRanges":[],"depth":0,"type":"unordered-list-item","text":"Offline Cookbook","key":"7tvl5"},{"data":{},"entityRanges":[{"key":1,"length":22,"offset":0}],"inlineStyleRanges":[],"depth":1,"type":"unordered-list-item","text":"Service Worker Recipes ","key":"bie66"}]},"dateAdded":{"$date":"2018-03-09T02:47:49.301Z"},"public":false,"user":{"$oid":"59e3a3ed3309784263455297"},"__v":0,"dateModified":{"$date":"2018-03-14T19:13:37.844Z"}}
